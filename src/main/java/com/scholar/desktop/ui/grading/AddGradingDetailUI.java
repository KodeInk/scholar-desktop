/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main.java.com.scholar.desktop.ui.grading;

import java.awt.HeadlessException;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import main.java.com.scholar.desktop.config.entities.SchoolData;
import main.java.com.scholar.desktop.engine.caller.api.v1.grading.request.GradingDetail;
import main.java.com.scholar.desktop.engine.caller.api.v1.grading.response.GradingDetailResponse;
import main.java.com.scholar.desktop.engine.caller.api.v1.grading.response.GradingResponse;
import main.java.com.scholar.desktop.helper.exceptions.BadRequestException;
import main.java.com.scholar.desktop.services.grading.GradingDetailService;
import main.java.com.scholar.desktop.services.grading.GradingService;
import main.java.com.scholar.desktop.ui.subjects.AddSubjectUI;

/**
 *
 * @author mover
 */
public class AddGradingDetailUI extends javax.swing.JPanel {

    private GradingDetailResponse gradingDetailResponse;
    /**
     * Creates new form AddGradingDetailUI
     */
    private static AddGradingDetailUI instance;
    private final SchoolData schoolData;

    private List<GradingResponse> gradingScales = null;

    public AddGradingDetailUI(SchoolData schoolData) {
        this.schoolData = schoolData;
        initComponents();
    }

    public void initData() {
        resetForm();
        saveButton.setText("SAVE");
        gradingDetailResponse = null;
        fetchGradingDetails(0, 10000);
        populateMiniGradeAndMaximumGadeCombos();
    }

    public void fetchGradingDetails(Integer offset, Integer limit) {

        resetGradingScaleCombo();
        gradingScaleField.addItem("Processing ... ");
        jLabel1.setText("Processing ... ");
        if (gradingScales != null) {
            populateSubjectsCombo();
        }

        SwingWorker swingWorker = new SwingWorker() {
            @Override
            protected Object doInBackground() throws Exception {
                gradingScales = GradingService.getInstance(schoolData).list(offset, limit);
                jLabel1.setText("Grading Detail  Information");
                populateSubjectsCombo();

                return null;
            }

        };
        swingWorker.execute();
    }

    public void populateMiniGradeAndMaximumGadeCombos() {
        for (int x = 0; x <= 100; x++) {
            minigradeField.addItem("" + x);
            maxgradeField.addItem("" + x);
        }

    }

    public void populateSubjectsCombo() {
        resetGradingScaleCombo();
        if (gradingScales != null) {
            gradingScales.forEach((response) -> {
                gradingScaleField.addItem(response.getName());
            });
        }
        gradingScaleField.setSelectedIndex(-1);

        if (gradingDetailResponse != null) {
            gradingScaleField.setSelectedItem(gradingDetailResponse.getGradingScale());
        }

    }

    public void resetGradingScaleCombo() {
        gradingScaleField.removeAllItems();
    }

    public static AddGradingDetailUI getInstance(SchoolData schoolData) {
        if (instance == null) {
            instance = new AddGradingDetailUI(schoolData);
        }
        return instance;
    }

    public void edit(GradingDetailResponse gradingDetailResponse) {
        this.gradingDetailResponse = gradingDetailResponse;
        symbolField.setText(gradingDetailResponse.getSymbol());

        minigradeField.setSelectedItem("" + gradingDetailResponse.getMin_grade().intValue());
        maxgradeField.setSelectedItem("" + gradingDetailResponse.getMax_grade().intValue());

        saveButton.setText("EDIT");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        symbolField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        maxgradeField = new javax.swing.JComboBox<>();
        gradingScaleField = new javax.swing.JComboBox<>();
        minigradeField = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setText("Grading Detail  Information");

        jSeparator1.setBackground(new java.awt.Color(153, 153, 153));

        jLabel2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel2.setText("Grading Scale : *");
        jLabel2.setToolTipText("");

        symbolField.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel3.setText("Grading Symbol : *");
        jLabel3.setToolTipText("");

        jLabel4.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel4.setText("Minimum Grade : *");
        jLabel4.setToolTipText("");

        saveButton.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        saveButton.setText("SAVE");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        cancelButton.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        cancelButton.setText("CANCEL");

        maxgradeField.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        gradingScaleField.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        minigradeField.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel5.setText("Maximum Grade : *");
        jLabel5.setToolTipText("");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)
                                .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(symbolField)
                                .addComponent(gradingScaleField, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(maxgradeField, javax.swing.GroupLayout.PREFERRED_SIZE, 544, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(minigradeField, javax.swing.GroupLayout.PREFERRED_SIZE, 544, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(95, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gradingScaleField, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(symbolField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(minigradeField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(maxgradeField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(57, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 663, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 389, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        validateForm();
        GradingDetail gradingDetail = getEntity();
        SubmitData(saveButton.getText(), gradingDetail);
    }//GEN-LAST:event_saveButtonActionPerformed

    public void SubmitData(String btnText, GradingDetail gradingDetail) throws HeadlessException {
        switch (btnText) {
            case "SAVE":
                saveSubjectPaper(gradingDetail);
                break;
            case "EDIT":
                editSubject(gradingDetail);
                break;
            default:
                break;
        }
    }

    private void saveSubjectPaper(GradingDetail subjectpaper) throws HeadlessException {
        try {

            GradingDetailResponse gradingDetailresponse = GradingDetailService.getInstance(schoolData).create(subjectpaper, "LOG ID");
            JOptionPane.showMessageDialog(this, "Record Saved Successfully");
            resetForm();

        } catch (HeadlessException | IOException ex) {
            Logger.getLogger(AddSubjectUI.class.getName()).log(Level.SEVERE, null, ex);
            throw new BadRequestException("Could not save the record to the server, something went wrong");
        }

    }

    public void resetForm() {
        gradingScaleField.setSelectedIndex(-1);
        minigradeField.setSelectedIndex(-1);
        maxgradeField.setSelectedIndex(-1);
        symbolField.setText("");
    }

    private void editSubject(GradingDetail gradingDetail) throws HeadlessException {
        try {

            if (gradingDetailResponse == null) {
                throw new BadRequestException("Could update record, missing data");
            }

            gradingDetail.setId(gradingDetailResponse.getId());
            GradingDetailService.getInstance(schoolData).edit(gradingDetail, "LOG ID");
            JOptionPane.showMessageDialog(this, "Record Saved Successfully");
            resetForm();

        } catch (IOException ex) {
            Logger.getLogger(AddSubjectUI.class.getName()).log(Level.SEVERE, null, ex);
            throw new BadRequestException("Could not save the record to the server, something went wrong");
        }

    }
    
    
    public void validateForm() throws NumberFormatException, BadRequestException {
        //todo: validate mandatories
        if (gradingScaleField.getSelectedIndex() == -1) {
            throw new BadRequestException("Grading Scale  is mandatory");
        }

        if (minigradeField.getSelectedIndex() == -1) {
            throw new BadRequestException("Minimum Grading is mandatory");
        }

        if (maxgradeField.getSelectedIndex() == -1) {
            throw new BadRequestException("Maximum Grading is mandatory");
        }

        if (symbolField.getText().isEmpty()) {
            throw new BadRequestException("Grading Symbol is mandatory");
        }

        Integer minimum = Integer.parseInt(minigradeField.getSelectedItem().toString());
        Integer maximum = Integer.parseInt(maxgradeField.getSelectedItem().toString());

        if (minimum > maximum) {
            throw new BadRequestException("Minimum grading should not be greater than maximum grading " + minimum + " > " + maximum);
        }

    }

    /**
     *
     * @return @throws NumberFormatException
     */
    public GradingDetail getEntity() throws NumberFormatException {
        GradingDetail gradingDetail = new GradingDetail();
        GradingResponse gradingScale = gradingScales.get(gradingScaleField.getSelectedIndex());
        gradingDetail.setGrading_scale(gradingScale.getId());
        gradingDetail.setSymbol(symbolField.getText());
        gradingDetail.setMin_grade(Integer.parseInt(minigradeField.getSelectedItem().toString()));
        gradingDetail.setMax_grade(Integer.parseInt(maxgradeField.getSelectedItem().toString()));
        return gradingDetail;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox<String> gradingScaleField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JComboBox<String> maxgradeField;
    private javax.swing.JComboBox<String> minigradeField;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextField symbolField;
    // End of variables declaration//GEN-END:variables
}
